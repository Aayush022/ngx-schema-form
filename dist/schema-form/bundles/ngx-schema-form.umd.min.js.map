{"version":3,"sources":["ng://ngx-schema-form/lib/model/actionregistry.ts","null","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"names":["ActionRegistry","prototype","clear","this","actions","register","actionId","action","get","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","FormProperty","schemaValidatorFactory","validatorRegistry","schema","parent","path","BehaviorSubject","schemaValidator","createValidatorFn","_parent","_root","root","PropertyGroup","_path","_valueChanges","_errorsChanges","type","_value","_visible","_errors","updateValueAndValidity","onlySelf","emitEvent","_updateValue","valueChanges","_runValidation","errors","customValidator","customErrors","findRoot","mergeErrors","setErrors","newErrors","isArray","apply","extendErrors","searchProperty","prop","base","result","getProperty","substr","property","setVisible","visible","_visibilityChanges","_bindVisibility","visibleIf","keys","undefined","propertiesBinding","dependencyPath","this_1","valueCheck","pipe","map","indexOf","visibilityCheck","and","combineLatest","v1","v2","console","warn","values","_i","distinctUntilChanged","subscribe","_this","_super","tslib_1.__extends","subPathIdx","propertyId","properties","subPath","forEachChild","fn","forEachChildRecursive","child","_bindVisibilityRecursive","isRoot","AtomicProperty","setValue","reset","resetValue","default","fallbackValue","_hasValue","NumberProperty","parseFloat","parseInt","StringProperty","BooleanProperty","ObjectProperty","formPropertyFactory","createProperties","resetProperties","propertiesId","propertySchema","createProperty","reduceValue","forEach","slice","ArrayProperty","addItem","newProperty","addProperty","items","removeItem","index","splice","_","idx","FormPropertyFactory","$ref","refSchema","getSchema","TypeError","initializeRoot","rootProperty","formatMessage","message","schemaError","mesg","Error","schemaWarning","SchemaPreprocessor","preprocess","jsonSchema","normalizeExtensions","checkProperties","checkAndCreateFieldsets","checkItems","normalizeWidget","recursiveCheck","fieldsets","order","replaceOrderByFieldsets","createFieldsets","checkFieldsUsage","fieldsId","usedFields","_a","tslib_1.__values","_b","fieldset","_c","fields","_d","fieldId","id","fieldsId_1","fieldsId_1_1","required","remainingfieldsId","title","description","name","fieldSchema","widget","definitions","removeRecursiveRefProperties","definitionPath","extensions","regex","k","find","match","v","copy","JSON","parse","stringify","ValidatorRegistry","validator","validators","BindingRegistry","bindings","binding","SchemaValidatorFactory","ZSchemaValidatorFactory","zschema","ZSchema","breakOnFirstError","validate","err","getLastErrors","denormalizeRequiredPropertyPaths","ref","compileSchema","getDefinition","getLastError","code","params","foundSchema","split","ptr","WidgetRegistry","setDefaultWidget","defaultWidget","getDefaultWidget","hasWidget","widgets","getWidgetType","WidgetFactory","registry","resolver","createWidget","container","componentClass","componentFactory","resolveComponentFactory","createComponent","Injectable","ComponentFactoryResolver","TerminatorService","onDestroy","Subject","destroy","useFactory","FormComponent","actionRegistry","bindingRegistry","cdr","terminator","EventEmitter","writeValue","obj","registerOnChange","onChangeCallback","onValueChanges","bind","registerOnTouched","ngOnChanges","changes","setValidators","setActions","setBindings","firstChange","model","errorsChanges","onErrorChange","emit","isValid","detectChanges","validatorId","bindingPath","setModel","assign","modelChange","observers","onChange","Component","args","selector","template","providers","provide","deps","NG_VALUE_ACCESSOR","useExisting","multi","ChangeDetectorRef","Input","Output","FormElementComponent","renderer","elementRef","FormControl","ngOnInit","parseButtons","setupBindings","formProperty","eventId","createBinding","listener","unlisten","listen","nativeElement","event","Function","buttons","button","createButtonCallback","parameters","preventDefault","onWidgetInstanciated","counter","control","ngOnDestroy","item","Renderer2","ElementRef","FormElementComponentAction","widgetFactory","subs","instance","unsubscribe","ViewChild","read","ViewContainerRef","WidgetChooserComponent","widgetInfo","widgetInstanciated","widgetInstance","Widget","ControlWidget","ngAfterViewInit","newValue","messages","filter","errorMessages","ArrayLayoutWidget","ObjectLayoutWidget","ArrayWidget","trackByIndex","ButtonWidget","CheckboxWidget","checked","onCheck","el","FileWidget","FileReader","reader","onloadend","filedata","data","btoa","onFileChange","$event","file","target","files","filename","size","encoding","readAsBinaryString","StringWidget","getInputType","DefaultWidgetRegistry","ObjectWidget","IntegerWidget","RangeWidget","TextAreaWidget","SelectWidget","RadioWidget","DefaultWidget","moduleProviders","useClass","SchemaFormModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","entryComponents","exports","TemplateSchemaService","changed","TemplateSchemaElement","getTextContent","node","from","childNodes","nodeType","TEXT_NODE","pop","nodeValue","trim","ButtonComponent","setLabelFromContent","textContent","label","ngAfterContentInit","forwardRef","FieldParent","defineProperty","getButtons","childButtons","randomString","Math","random","toString","click","_button","getFieldsValidators","reduce","field","getValidators","getFieldsSchema","FieldType","ItemComponent","FieldComponent","templateSchemaService","childFields","oneOf","getOneOf","placeholder","format","readOnly","keys_1","keys_1_1","isFirstChange","childItems","enum","setTitleFromContent","merge","ContentChildren","TemplateSchemaDirective","formComponent","terminatorService","setFormDocumentSchema","previousSchema","requred","SimpleChange","Boolean","toArray","Directive","TemplateSchemaModule"],"mappings":"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","sourcesContent":["import { Action } from './action';\n\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n    }\n    this._path = path;\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    }\n    else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          let property = this.searchProperty(dependencyPath);\n          if (property) {\n            const valueCheck = property.valueChanges.pipe(map(\n              value => {\n                if (visibleIf[dependencyPath].indexOf('$ANY$') !== -1) {\n                  return value.length > 0;\n                } else {\n                  return visibleIf[dependencyPath].indexOf(value) !== -1;\n                }\n              }\n            ));\n            const visibilityCheck = property._visibilityChanges;\n            const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n            propertiesBinding.push(and);\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import {AtomicProperty} from './atomicproperty';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n","import {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(index: number) {\n    (<FormProperty[]>this.properties).splice(index, 1);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {NumberProperty} from './numberproperty';\nimport {StringProperty} from './stringproperty';\nimport {BooleanProperty} from './booleanproperty';\nimport {ObjectProperty} from './objectproperty';\nimport {ArrayProperty} from './arrayproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class FormPropertyFactory {\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n    } else {\n      path = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n      switch (schema.type) {\n        case 'integer':\n        case 'number':\n          newProperty = new NumberProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'string':\n          newProperty = new StringProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'boolean':\n          newProperty = new BooleanProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'object':\n          newProperty = new ObjectProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'array':\n          newProperty = new ArrayProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        default:\n          throw new TypeError(`Undefined type ${schema.type}`);\n      }\n    }\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","import {isBlank} from './utils';\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (let fieldId of fieldsId) {\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (jsonSchema.required.indexOf(fieldId) > -1) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import { Validator } from './validator';\n\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\n\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n}\n\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.zschema = new ZSchema({\n        breakOnFirstError: false\n    });\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form>\n      <sf-form-element\n        *ngIf=\"rootProperty\" [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n      this.modelChange.emit(value);\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\nimport {Function} from 'estree';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = 'field' + (FormElementComponent.counter++);\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties; let i=index; trackBy:trackByIndex\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(i)\" class=\"btn btn-default array-remove-button\">\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\">\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n\n  addItem() {\n    this.formProperty.addItem();\n  }\n\n  removeItem(index: number) {\n    this.formProperty.removeItem(index);\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [attr.disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\">\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = btoa(this.reader.result);\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [name]=\"name\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [attr.readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" value=\"{{option.enum[0]}}\" type=\"radio\"  [attr.disabled]=\"schema.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [attr.disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.getInputType()==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\" [attr.type]=\"this.getInputType()\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\n\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  template: `<ng-content></ng-content>\n`,\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import { ElementRef, QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  template: `<ng-content></ng-content>\n`\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  AfterContentInit,\n  ContentChildren,\n  ViewChild,\n  QueryList,\n  ElementRef,\n  forwardRef,\n  SimpleChanges,\n  SimpleChange,\n  OnChanges\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Action } from '../../model/action';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\n\n\n@Component({\n  selector: 'sf-field',\n  template: `<ng-content ></ng-content>\n`\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  HostBinding,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType, Field } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"]}