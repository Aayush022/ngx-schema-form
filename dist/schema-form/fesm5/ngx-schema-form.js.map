{"version":3,"file":"ngx-schema-form.js.map","sources":["ng://ngx-schema-form/lib/model/actionregistry.ts","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"sourcesContent":["import { Action } from './action';\n\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","import {Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n    }\n    this._path = path;\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    }\n    else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          let property = this.searchProperty(dependencyPath);\n          if (property) {\n            const valueCheck = property.valueChanges.pipe(map(\n              value => {\n                if (visibleIf[dependencyPath].indexOf('$ANY$') !== -1) {\n                  return value.length > 0;\n                } else {\n                  return visibleIf[dependencyPath].indexOf(value) !== -1;\n                }\n              }\n            ));\n            const visibilityCheck = property._visibilityChanges;\n            const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n            propertiesBinding.push(and);\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import {AtomicProperty} from './atomicproperty';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n","import { AtomicProperty } from './atomicproperty';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n","import {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(index: number) {\n    (<FormProperty[]>this.properties).splice(index, 1);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {NumberProperty} from './numberproperty';\nimport {StringProperty} from './stringproperty';\nimport {BooleanProperty} from './booleanproperty';\nimport {ObjectProperty} from './objectproperty';\nimport {ArrayProperty} from './arrayproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\n\nexport class FormPropertyFactory {\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n    } else {\n      path = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n      switch (schema.type) {\n        case 'integer':\n        case 'number':\n          newProperty = new NumberProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'string':\n          newProperty = new StringProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'boolean':\n          newProperty = new BooleanProperty(this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'object':\n          newProperty = new ObjectProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        case 'array':\n          newProperty = new ArrayProperty(this, this.schemaValidatorFactory, this.validatorRegistry, schema, parent, path);\n          break;\n        default:\n          throw new TypeError(`Undefined type ${schema.type}`);\n      }\n    }\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import {isBlank} from './utils';\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (let fieldId of fieldsId) {\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (jsonSchema.required.indexOf(fieldId) > -1) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","import { Validator } from './validator';\n\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\n\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n}\n\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.zschema = new ZSchema({\n        breakOnFirstError: false\n    });\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form>\n      <sf-form-element\n        *ngIf=\"rootProperty\" [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n      this.modelChange.emit(value);\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\nimport {Function} from 'estree';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = 'field' + (FormElementComponent.counter++);\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', {read: ViewContainerRef}) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties; let i=index; trackBy:trackByIndex\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(i)\" class=\"btn btn-default array-remove-button\">\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\">\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n\n  addItem() {\n    this.formProperty.addItem();\n  }\n\n  removeItem(index: number) {\n    this.formProperty.removeItem(index);\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [attr.disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\">\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = btoa(this.reader.result);\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [name]=\"name\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [attr.readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" value=\"{{option.enum[0]}}\" type=\"radio\"  [attr.disabled]=\"schema.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [attr.disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.disabled]=\"schema.readOnly\" class=\"form-control\">\n\t\t<option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.getInputType()==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\" [attr.type]=\"this.getInputType()\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\n\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  template: `<ng-content></ng-content>\n`,\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import { ElementRef, QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  template: `<ng-content></ng-content>\n`\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  AfterContentInit,\n  ContentChildren,\n  ViewChild,\n  QueryList,\n  ElementRef,\n  forwardRef,\n  SimpleChanges,\n  SimpleChange,\n  OnChanges\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Action } from '../../model/action';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\n\n\n@Component({\n  selector: 'sf-field',\n  template: `<ng-content ></ng-content>\n`\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  HostBinding,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType, Field } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
